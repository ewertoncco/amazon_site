<!-- Wappler include head-page="layouts/adm" fontawesome_5="cdn" bootstrap5="custom" is="dmx-app" id="evento_adm" appConnect="local" components="{dmxFormatter:{},dmxValidator:{},dmxMoment:{},dmxDataTraversal:{},dmxBootstrap5Modal:{}}" moment_2="local with locales" -->
<div class="modal" id="deletarEvento" is="dmx-bs5-modal" tabindex="-1">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Deletar Evento</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-danger fw-bold text-center">Deletar um evento Não é indicado se você ja vendeu algo</p>
                <p class="text-center lh-sm">Quando você deletar um evento. Todos os itens cadastrados e vendas serão apagados. Voce pode alterar o Status do evento,</p>
                <h3 class="text-center">Tem certeza que quer deletar?</h3>
            </div>
            <div class="modal-footer">
                <form id="deletar" is="dmx-serverconnect-form" method="post" action="/api/eventos/deletar_evento" dmx-on:success="deletarEvento.hide();notifies1.success('Evento deletado!');browser1.goto('/admin/eventos_adm',true)">
                    <dmx-form-data id="input_id" name="id" dmx-bind:data="query.evento"></dmx-form-data>
                    <button type="submit" class="btn btn-danger">Deletar</button>
                </form>

            </div>
        </div>
    </div>
</div>
<dmx-serverconnect id="compradores" url="/api/vendas/lista_compradores" noload="true" dmx-param:uuid="query.evento"></dmx-serverconnect>
<dmx-moment id="moment1" locale="pt-br"></dmx-moment>
<dmx-datetime id="hoje" interval="hours"></dmx-datetime>
<dmx-serverconnect id="evento" url="/api/eventos/evento_adm" dmx-param:evento="query.evento"></dmx-serverconnect>
<meta name="ac:route" content="/admin/evento_adm/:evento">

<!-- Scripts para PDF -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/3.0.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.7.0/jspdf.plugin.autotable.min.js"></script>

<div class="page-heading">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">{{evento.data.evento.titulo}}</h2>
        <div>


            <a href="#" class="btn btn-primary me-2" dmx-on:click="editarEventoModal.show()"><i class="fas fa-edit me-1"></i> Editar</a><a class="btn btn-warning me-2" id="btn-gerar-pdf" dmx-on:click="compradores.load({}); setTimeout(gerarPDF, 100)"><i class="fas fa-download me-1"></i> Lista compradores</a><a href="#" class="btn me-2 btn-danger" dmx-on:click="deletarEvento.show()"><i class="fas fa-trash me-1"></i> Deletar</a>
        </div>
    </div>

    <div class="row">
        <!-- Card 1: Transações -->
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card card-statistic">
                <div class="card-body p-2">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon purple me-3">
                            <i class="fas fa-shopping-bag"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-0">Transações</h6>
                            <h3 class="fw-bold mb-0">{{evento.data.evento.quantidade_vendas}}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Card 2: Valor -->
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card card-statistic">
                <div class="card-body p-2">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon purple me-3">
                            <i class="fas fa-dollar-sign"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Valor</h6>
                            <h3 class="fw-bold mb-0">{{evento.data.evento.total_vendas.toNumber().formatCurrency('R$ ', ',', '.', 2)}}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Card 3: Qtide PIX -->
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card card-statistic">
                <div class="card-body p-2">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon teal me-3">
                            <i class="fas fa-qrcode"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Qtide PIX</h6>
                            <h3 class="fw-bold mb-0">{{evento.data.evento.qtide_pix}}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Card 4: Total Pix -->
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card card-statistic">
                <div class="card-body p-2">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon teal me-3">
                            <i class="fas fa-dollar-sign"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Total Pix</h6>
                            <h3 class="fw-bold mb-0">{{evento.data.evento.total_pix.toNumber().formatCurrency('R$ ', ',', '.', 2)}}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Card 5: Qtide Crédito -->
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card card-statistic">
                <div class="card-body p-2">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon purple me-3">
                            <i class="fas fa-credit-card"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-0">Qtide Crédito</h6>
                            <h3 class="fw-bold mb-0">{{evento.data.evento.qtide_credito}}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Card 6: Valor Crédito -->
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card card-statistic">
                <div class="card-body p-2">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon purple me-3">
                            <i class="fas fa-credit-card"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Valor Crédito</h6>
                            <h3 class="fw-bold mb-0">{{evento.data.evento.total_credito.toNumber().formatCurrency('R$ ', ',', '.', 2)}}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Card 7: Cortesias -->
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card card-statistic">
                <div class="card-body p-2">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon red me-3">
                            <i class="fas fa-gift"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Cortesias</h6>
                            <h3 class="fw-bold mb-0">{{evento.data.evento.total_cortesias}}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Card 8: Devoluções -->
        <div class="col-12 col-md-6 col-lg-3">
            <div class="card card-statistic">
                <div class="card-body p-2">
                    <div class="d-flex align-items-center">
                        <div class="stats-icon red me-3">
                            <i class="fas fa-undo"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Devoluções</h6>
                            <h3 class="fw-bold mb-0">{{evento.data.evento.total_devolucoes}}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Seção de Ingressos Cadastrados -->
    <div class="row mt-2">
        <div class="col-12">
            <div class="card">
                <div class="card-header pt-2 pb-0">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h3 class="mb-0">Ingressos cadastrados</h3>
                        <button class="btn btn-primary btn-sm" dmx-on:click="novoItemModal.show()">
                            <i class="fas fa-plus me-1"></i> Adicionar Item
                        </button>
                    </div>
                </div>
                <div class="card-body pt-0">
                    <div class="table-responsive">
                        <table class="table table-hover table-sm">
                            <thead>
                                <tr>
                                    <th>Nome</th>
                                    <th>Valor</th>
                                    <th>Início</th>
                                    <th>Final</th>
                                    <th>Progresso</th>
                                    <th>Vendas</th>
                                    <th>Cortesias</th>
                                    <th>É Mesa</th>
                                    <th>Lugares/Mesa</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody is="dmx-repeat" id="lista_ingressos" key="id" dmx-bind:repeat="evento.data.evento.itens">
                                <tr>
                                    <td>{{nome}}</td>
                                    <td>{{valor.toNumber().formatCurrency('R$ ', ',', '.', 2)}}</td>
                                    <td>{{inicio_vendas.formatDate('dd/MM/yy HH:mm')}}</td>
                                    <td>{{final_vendas.formatDate('dd/MM/yy HH:mm')}}</td>
                                    <td>
                                        <div class="d-flex align-items-center flex-row">
                                            <span class="me-2">{{total_vendas}}/{{qtide_cadastrada}}</span>
                                            <div class="progress w-100" style="height: 10px;">
                                                <div class="progress-bar" role="progressbar" dmx-bind:style="width: {{porcentagem_vendas}}%" dmx-bind:class="porcentagem_vendas < 30 ? 'bg-danger' : (porcentagem_vendas < 70 ? 'bg-warning' : 'bg-success')">
                                                </div>
                                            </div>


                                        </div>
                                    </td>
                                    <td>{{total_vendas}}</td>
                                    <td>{{cortesias}}</td>
                                    <td class="text-center">
                                        <span dmx-bind:class="is_mesa ? 'badge bg-success' : 'badge bg-secondary'">
                                            {{is_mesa ? 'Sim' : 'Não'}}
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        {{is_mesa ? qtide_mesa : '-'}}
                                    </td>
                                    <td class="text-center">
                                        <a href="#" dmx-on:click="session.set('item_id',id);editarItemModal.show();editarItemModal.carregarItem.load({})"><i class="fas fa-edit text-primary"></i></a>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .stats-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 50px;
        border-radius: 15px;
        font-size: 1.1rem;
        color: white;
    }

    .stats-icon.purple {
        background-color: #9694ff;
    }

    .stats-icon.teal {
        background-color: #20c997;
    }

    .stats-icon.red {
        background-color: #ff7976;
    }

    .card-statistic {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        border-radius: 15px;
        border: none;
        margin-bottom: 24px;
        transition: all 0.3s ease;
    }

    .card-statistic:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
    }

    .card-statistic h6 {
        font-size: 0.75rem;
        color: #596780;
    }

    .card-statistic h3 {
        font-size: 0.95rem;
        font-weight: 600;
        color: #596780;
    }

    .page-heading h3 {
        font-size: 1.1rem;
        color: #596780;
        font-weight: 600;
    }

    .card-header h4 {
        font-size: 0.95rem;
        color: #596780;
        font-weight: 600;
    }

    .progress {
        border-radius: 12px;
        background-color: #f0f0f0;
    }

    .table {
        font-size: 0.92rem;
        color: #596780;
    }

    .table> :not(caption)>*>* {
        padding: 0.75rem 1.25rem;
    }

    .card-body {
        color: #596780;
    }

    .text-muted {
        color: #999 !important;
    }

    .text-primary {
        color: #4489e4 !important;
    }

    /* Correção para o estilo dos switches (toggles) */
    .form-check-input:checked {
        background-color: #4489e4;
        border-color: #4489e4;
    }

    .form-switch .form-check-input {
        width: 2em;
        margin-left: -2.5em;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e");
        background-position: left center;
        border-radius: 2em;
        transition: background-position 0.15s ease-in-out;
    }

    .form-switch .form-check-input:checked {
        background-position: right center;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
    }

    .form-switch .form-check-input:focus {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%2386b7fe'/%3e%3c/svg%3e");
    }
</style>

<!-- Modal para Adicionar Novo Item -->
<div class="modal fade" id="novoItemModal" is="dmx-bs5-modal" tabindex="-1" aria-labelledby="novoItemModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white" style="background-color: #4489e4 !important;">
                <h5 class="modal-title text-white" id="novoItemModalLabel"><i class="fas fa-plus-circle me-2"></i>Adicionar Novo Item</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body">
                <form id="novoItemForm" is="dmx-serverconnect-form" method="post" action="/api/item/novo_item" dmx-param:evento_id="evento.data.evento.id" dmx-on:success="notifies1.success('Item adicionado com sucesso!');evento.load({evento: query.evento});novoItemModal.hide();novoItemForm.reset()">
                    <dmx-form-data id="inpt_evento_id" name="evento_id" dmx-bind:data="evento.data.evento.id"></dmx-form-data>
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <label for="nome" class="form-label">Nome do Item*</label>
                            <input type="text" class="form-control" id="nome" name="nome" placeholder="Ex:  VIP (1º Lote)" required="" data-msg-required="Obrigatório">
                        </div>
                        <div class="col-md-4">
                            <label for="tipo_item" class="form-label">Tipo do Item*</label>
                            <select class="form-select" id="tipo_item" name="tipo_item" required>
                                <option value="">Selecione...</option>
                                <option selected="" value="1">Ingresso</option>
                                <option value="2">Camiseta</option>
                                <option value="3">Chaveiro</option>
                                <option value="4">Copo</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="valor" class="form-label">Valor (R$)*</label>
                            <div class="input-group">
                                <span class="input-group-text">R$</span>
                                <input type="text" class="form-control" id="valor" name="valor" placeholder="0,00" required="" data-mask="money" data-msg-required="Obrigatório">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="qtide_cadastrada" class="form-label">Quantidade Disponível*</label>
                            <input type="number" class="form-control" id="qtide_cadastrada" name="qtide_cadastrada" placeholder="Ex: 100" min="1" required="" data-msg-required="Obrigatório" data-msg-min="Introduza um valor maior ou igual a {0}.">
                        </div>
                        <div class="col-md-4">
                            <label for="ordem" class="form-label">Ordem de Exibição</label>
                            <input type="number" class="form-control" id="ordem" name="ordem" placeholder="Ex: 3" min="1" value="1" data-msg-min="Introduza um valor maior ou igual a {0}." required="" data-msg-required="Obrigatório">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="inicio_vendas" class="form-label">Início das Vendas*</label>
                            <input type="datetime-local" class="form-control" id="inicio_vendas" name="inicio_vendas" required="" data-msg-required="Obrigatório" dmx-bind:value="hoje.datetime">
                        </div>
                        <div class="col-md-6">
                            <label for="final_vendas" class="form-label">Final das Vendas*</label>
                            <input type="datetime-local" class="form-control" id="final_vendas" name="final_vendas" required="" data-msg-required="Obrigatório" dmx-bind:value="hoje.datetime.addDays(5)">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="is_mesa" name="is_mesa" value="true" dmx-on:change="$('#mesa_config').toggle(this.checked)">
                                <label class="form-check-label" for="is_mesa">É uma mesa?</label>
                            </div>
                            <div id="mesa_config" style="display: none; margin-top: 10px;">
                                <label for="qtide_mesa" class="form-label">Lugares por Mesa</label>
                                <input type="number" class="form-control" id="qtide_mesa" name="qtide_mesa" placeholder="4" min="1" value="4">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="ativo" name="ativo" value="true" checked>
                                <label class="form-check-label" for="ativo">Ativo</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" dmx-on:click="novoItemForm.submit()"><i class="fas fa-check me-1"></i> Adicionar Item</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Editar Item -->
<div class="modal fade" id="editarItemModal" is="dmx-bs5-modal" tabindex="-1" aria-labelledby="editarItemModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white" style="background-color: #4489e4 !important;">
                <h5 class="modal-title text-white" id="editarItemModalLabel"><i class="fas fa-edit me-2"></i>Editar Item</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body">
                <dmx-serverconnect id="carregarItem" url="/api/item/item" dmx-param:id="session.data.item_id" noload="true"></dmx-serverconnect>
                <form id="formEditarItem" is="dmx-serverconnect-form" method="post" action="/api/item/editar_item" dmx-on:success="notifies1.success('Item atualizado com sucesso!');evento.load({evento: query.evento});editarItemModal.hide()">
                    <dmx-form-data id="edit_id" name="id" dmx-bind:data="session.data.item_id"></dmx-form-data>
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <label for="edit_nome" class="form-label">Nome do Item*</label>
                            <input type="text" class="form-control" id="edit_nome" name="nome" placeholder="Ex:  VIP (1º Lote)" required="" data-msg-required="Obrigatório" dmx-bind:value="carregarItem.data.item.nome">
                        </div>
                        <div class="col-md-4">
                            <label for="edit_tipo_item" class="form-label">Tipo do Item*</label>
                            <select class="form-select" id="edit_tipo_item" name="tipo_item" required="" dmx-bind:value="carregarItem.data.item.tipo_item" data-msg-required="Obrigatório">
                                <option value="">Selecione...</option>
                                <option value="1">Ingresso</option>
                                <option value="2">Camiseta</option>
                                <option value="3">Chaveiro</option>
                                <option value="4">Copo</option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="edit_valor" class="form-label">Valor (R$)*</label>
                            <div class="input-group">
                                <span class="input-group-text">R$</span>
                                <input type="text" class="form-control" id="edit_valor" name="valor" placeholder="0,00" required="" data-mask="money" data-msg-required="Obrigatório" dmx-bind:value="carregarItem.data.item.valor">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_qtide_cadastrada" class="form-label">Quantidade Disponível*</label>
                            <input type="number" class="form-control" id="edit_qtide_cadastrada" name="qtide_cadastrada" placeholder="Ex: 100" min="1" required="" data-msg-required="Obrigatório" data-msg-min="Introduza um valor maior ou igual a {0}." dmx-bind:value="carregarItem.data.item.qtide_cadastrada">
                        </div>
                        <div class="col-md-4">
                            <label for="edit_ordem" class="form-label">Ordem de Exibição</label>
                            <input type="number" class="form-control" id="edit_ordem" name="ordem" placeholder="Ex: 3" min="1" data-msg-min="Introduza um valor maior ou igual a {0}." required="" data-msg-required="Obrigatório" dmx-bind:value="carregarItem.data.item.ordem">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="edit_inicio_vendas" class="form-label">Início das Vendas*</label>
                            <input type="datetime-local" class="form-control" id="edit_inicio_vendas" name="inicio_vendas" required="" data-msg-required="Obrigatório" dmx-bind:value="carregarItem.data.item.inicio_vendas.formatDate('yyyy-MM-ddTHH:mm')">
                        </div>
                        <div class="col-md-6">
                            <label for="edit_final_vendas" class="form-label">Final das Vendas*</label>
                            <input type="datetime-local" class="form-control" id="edit_final_vendas" name="final_vendas" required="" data-msg-required="Obrigatório" dmx-bind:value="carregarItem.data.item.final_vendas.formatDate('yyyy-MM-ddTHH:mm')">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="edit_is_mesa" name="is_mesa" value="true" dmx-bind:checked="carregarItem.data.item.is_mesa" dmx-on:change="$('#edit_mesa_config').toggle(this.checked)">
                                <label class="form-check-label" for="edit_is_mesa">É uma mesa?</label>
                            </div>
                            <div id="edit_mesa_config" dmx-bind:style="'display:' + (carregarItem.data.item.is_mesa ? 'block' : 'none') + '; margin-top: 10px;'">
                                <label for="edit_qtide_mesa" class="form-label">Lugares por Mesa</label>
                                <input type="number" class="form-control" id="edit_qtide_mesa" name="qtide_mesa" placeholder="4" min="1" dmx-bind:value="carregarItem.data.item.qtide_mesa || 4">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="edit_ativo" name="ativo" value="true" dmx-bind:checked="carregarItem.data.item.ativo">
                                <label class="form-check-label" for="edit_ativo">Ativo</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-times me-1"></i> Cancelar</button>
                <button type="button" class="btn btn-primary" dmx-on:click="formEditarItem.submit()"><i class="fas fa-save me-1"></i> Salvar Alterações</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Editar Evento -->
<div class="modal fade" id="editarEventoModal" is="dmx-bs5-modal" tabindex="-1" aria-labelledby="editarEventoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white" style="background-color: #4489e4 !important;">
                <h5 class="modal-title text-white" id="editarEventoModalLabel"><i class="fas fa-edit me-2"></i>Editar Evento</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body p-0">
                <!-- Progress Bar -->
                <div class="px-3 pt-3">
                    <div class="progress mb-2" style="height: 8px;">
                        <div class="progress-bar" role="progressbar" style="width: 20%;" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                </div>

                <form id="editarEventoForm" is="dmx-serverconnect-form" method="post" action="/api/eventos/editar_evento" dmx-on:success="notifies1.success('Evento atualizado com sucesso!');editarEventoModal.hide();evento.load({evento: query.evento})" novalidate>
                    <dmx-form-data id="evento_id" name="id" dmx-bind:data="evento.data.evento.id"></dmx-form-data>

                    <!-- Steps Container -->
                    <div class="steps-container">
                        <!-- Step 1: Informações Básicas -->
                        <div class="step active" id="edit_step1">
                            <div class="card border-0">
                                <div class="card-body">
                                    <h5 class="card-title mb-4"><i class="fas fa-info-circle me-2"></i>Informações Básicas</h5>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label for="edit_titulo" class="form-label">Título do Evento*</label>
                                            <input type="text" class="form-control" id="edit_titulo" name="titulo" placeholder="Ex: Feira de Tecnologia 2025" required dmx-bind:value="evento.data.evento.titulo">
                                        </div>
                                        <div class="col-md-6">
                                            <label for="edit_sub_titulo" class="form-label">Subtítulo</label>
                                            <input type="text" class="form-control" id="edit_sub_titulo" name="sub_titulo" placeholder="Ex: Inovações e tendências" dmx-bind:value="evento.data.evento.sub_titulo">
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label for="edit_data_hora" class="form-label">Data e Hora*</label>
                                            <input type="datetime-local" class="form-control" id="edit_data_hora" name="data_hora" required dmx-bind:value="evento.data.evento.data_hora.formatDate('yyyy-MM-ddTHH:mm')">
                                        </div>
                                        <div class="col-md-6">
                                            <label for="edit_local" class="form-label">Local*</label>
                                            <input type="text" class="form-control" id="edit_local" name="local" placeholder="Ex: Centro de Convenções SP" required dmx-bind:value="evento.data.evento.local">
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label for="edit_slug" class="form-label">Slug URL*</label>
                                            <div class="input-group">
                                                <span class="input-group-text">evento/</span>
                                                <input type="text" class="form-control" id="edit_slug" name="slug" placeholder="feira-tecnologia-2025" required dmx-bind:value="evento.data.evento.slug">
                                            </div>
                                            <div class="form-text">URL amigável do evento (sem espaços ou caracteres especiais)</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 2: Elementos Gráficos -->
                        <div class="step" id="edit_step2" style="display: none;">
                            <div class="card border-0">
                                <div class="card-body">
                                    <h5 class="card-title mb-4"><i class="fas fa-images me-2"></i>Elementos Gráficos</h5>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label for="edit_banner" class="form-label">Banner do Evento</label>
                                            <div class="d-flex align-items-center gap-2">
                                                <div class="flex-grow-1">
                                                    <input type="file" class="form-control" id="edit_banner" name="banner" accept="image/*" onchange="previewEditImage(this, 'editBannerPreview')">
                                                </div>
                                                <div id="editBannerPreview" style="width: 60px; height: 106px; overflow: hidden; display: block;">
                                                    <img dmx-bind:src="evento.data.evento.banner" class="img-fluid border rounded" style="width: 100%; height: 100%; object-fit: cover;">
                                                </div>
                                            </div>
                                            <div class="form-text">1080 x 1920 pixels (Igual Stories do Insta). Tam. Max. 1MB</div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-check form-switch mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_tem_mapa" name="tem_mapa" value="true" dmx-bind:checked="evento.data.evento.tem_mapa">
                                                <label class="form-check-label" for="edit_tem_mapa">Incluir mapa do evento</label>
                                            </div>
                                            <div id="editMapaUploadContainer" dmx-bind:style="'display:' + (evento.data.evento.tem_mapa ? 'block' : 'none')">
                                                <label for="edit_mapa_imagem" class="form-label">Imagem do Mapa</label>
                                                <div class="d-flex align-items-center gap-2">
                                                    <div class="flex-grow-1">
                                                        <input type="file" class="form-control" id="edit_mapa_imagem" name="mapa_imagem" accept="image/*" onchange="previewEditImage(this, 'editMapaPreview')">
                                                    </div>
                                                    <div id="editMapaPreview" style="width: 106px; height: 60px; overflow: hidden; display: block;" dmx-bind:style="'display:' + (evento.data.evento.mapa_imagem ? 'block' : 'none')">
                                                        <img dmx-bind:src="evento.data.evento.mapa_imagem" class="img-fluid border rounded" style="width: 100%; height: 100%; object-fit: cover;">
                                                    </div>
                                                </div>
                                                <div class="form-text">1920 x 1080 pixels. Tam. Max. 1MB</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 3: Descrição e Detalhes -->
                        <div class="step" id="edit_step3" style="display: none;">
                            <div class="card border-0">
                                <div class="card-body">
                                    <h5 class="card-title mb-4"><i class="fas fa-align-left me-2"></i>Descrição e Detalhes</h5>

                                    <div class="row mb-3">
                                        <div class="col-12">
                                            <div class="form-check form-switch mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_mostrar_descricao" name="mostrar_descricao" value="true" dmx-bind:checked="evento.data.evento.mostrar_descricao">
                                                <label class="form-check-label" for="edit_mostrar_descricao">Mostrar descrição na página do evento</label>
                                            </div>
                                        </div>
                                        <div class="col-12">
                                            <label for="edit_descricao" class="form-label">Descrição Detalhada</label>
                                            <textarea class="form-control" id="edit_descricao" name="descricao" rows="6" placeholder="Descreva seu evento com detalhes, emojis são bem-vindos!" dmx-bind:value="evento.data.evento.descricao"></textarea>
                                            <div class="invalid-feedback">A descrição detalhada é obrigatória quando "Mostrar descrição" está ativado</div>
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <div class="form-check form-switch mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_destaque" name="destaque" value="true" dmx-bind:checked="evento.data.evento.destaque">
                                                <label class="form-check-label" for="edit_destaque">Destacar na página inicial</label>
                                            </div>
                                            <div id="editDestaqueConfigContainer" dmx-bind:style="'display:' + (evento.data.evento.destaque ? 'block' : 'none')">
                                                <div class="form-text">Tempo que o evento ficará visível no carrossel de destaques</div>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <input type="number" class="form-control" id="edit_segundos_destaque" name="segundos_destaque" min="1000" step="500" dmx-bind:value="evento.data.evento.segundos_destaque">
                                            <label for="edit_segundos_destaque" class="form-label">Tempo de exibição (milissegundos)</label>
                                            <div class="invalid-feedback">O tempo de exibição é obrigatório quando "Destacar na página inicial" está ativado</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 4: Configurações de Pagamento -->
                        <div class="step" id="edit_step4" style="display: none;">
                            <div class="card border-0">
                                <div class="card-body">
                                    <h5 class="card-title mb-4"><i class="fas fa-credit-card me-2"></i>Configurações de Pagamento</h5>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <div class="form-check form-switch mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_aceita_pix" name="aceita_pix" value="true" dmx-bind:checked="evento.data.evento.aceita_pix">
                                                <label class="form-check-label" for="edit_aceita_pix">Aceitar pagamento via PIX</label>
                                            </div>
                                            <div class="form-check form-switch mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_aceita_cartao" name="aceita_cartao" value="true" dmx-bind:checked="evento.data.evento.aceita_cartao">
                                                <label class="form-check-label" for="edit_aceita_cartao">Aceitar pagamento via Cartão</label>
                                            </div>
                                            <div id="editCartoesConfigContainer" dmx-bind:style="'display:' + (evento.data.evento.aceita_cartao ? 'block' : 'none')">
                                                <label for="edit_parcelas_cartao" class="form-label">Número máximo de parcelas</label>
                                                <select class="form-select" id="edit_parcelas_cartao" name="parcelas_cartao" dmx-bind:value="evento.data.evento.parcelas_cartao">
                                                    <option value="1">1x (à vista)</option>
                                                    <option value="2">2x</option>
                                                    <option value="3">3x</option>
                                                    <option value="6">6x</option>
                                                    <option value="12">12x</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-check form-switch mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_tem_cupom" name="tem_cupom" value="true" dmx-bind:checked="evento.data.evento.tem_cupom">
                                                <label class="form-check-label" for="edit_tem_cupom">Oferecer cupom de desconto</label>
                                            </div>
                                            <div id="editCupomConfigContainer" dmx-bind:style="'display:' + (evento.data.evento.tem_cupom ? 'block' : 'none')">
                                                <div class="mb-2">
                                                    <label for="edit_codigo_cupom" class="form-label">Código do cupom</label>
                                                    <input type="text" class="form-control" id="edit_codigo_cupom" name="codigo_cupom" placeholder="Ex: TECH2025" oninput="this.value = this.value.replace(/\s+/g, '').toUpperCase()" dmx-bind:value="evento.data.evento.codigo_cupom" data-rule-required="edit_tem_cupom.checked" data-msg-required="Código do cupom é obrigatório">
                                                    <div class="invalid-feedback">Código do cupom é obrigatório</div>
                                                </div>
                                                <div>
                                                    <label for="edit_valor_cupom" class="form-label">Valor do desconto (%)</label>
                                                    <input type="number" class="form-control" id="edit_valor_cupom" name="valor_cupom" min="1" max="100" placeholder="10" oninput="this.value = this.value.replace(/[^0-9]/g, '')" dmx-bind:value="evento.data.evento.valor_cupom" data-rule-required="edit_tem_cupom.checked" data-rule-range="[1, 100]" data-msg-required="Valor do desconto é obrigatório" data-msg-range="O valor deve estar entre 1% e 100%">
                                                    <div class="invalid-feedback">Valor do desconto é obrigatório (apenas números entre 1 e 100)</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 5: Opções Adicionais -->
                        <div class="step" id="edit_step5" style="display: none;">
                            <div class="card border-0">
                                <div class="card-body">
                                    <h5 class="card-title mb-4"><i class="fas fa-cog me-2"></i>Opções Adicionais</h5>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <h6>Políticas de Ingressos</h6>
                                            <div class="form-check form-switch mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_pode_alterar_ingresso" name="pode_alterar_ingresso" value="true" dmx-bind:checked="evento.data.evento.pode_alterar_ingresso">
                                                <label class="form-check-label" for="edit_pode_alterar_ingresso">Permitir alteração de ingressos</label>
                                            </div>
                                            <div class="form-check form-switch mt-4 mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_pode_devolver_ingresso" name="pode_devolver_ingresso" value="true" dmx-bind:checked="evento.data.evento.pode_devolver_ingresso">
                                                <label class="form-check-label" for="edit_pode_devolver_ingresso">Permitir devolução de ingressos</label>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <h6>Suporte via WhatsApp</h6>
                                            <div class="form-check form-switch mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_tem_whatsapp" name="tem_whatsapp" value="true" dmx-bind:checked="evento.data.evento.tem_whatsapp">
                                                <label class="form-check-label" for="edit_tem_whatsapp">Oferecer suporte via WhatsApp</label>
                                            </div>
                                            <div id="editWhatsappConfigContainer" dmx-bind:style="'display:' + (evento.data.evento.tem_whatsapp ? 'block' : 'none')">
                                                <label for="edit_numero_whatsapp" class="form-label">Número do WhatsApp</label>
                                                <input type="tel" class="form-control" id="edit_numero_whatsapp" name="numero_whatsapp" placeholder="Ex: 11912345678" dmx-bind:value="evento.data.evento.numero_whatsapp" data-rule-required="edit_tem_whatsapp.checked" data-rule-digits="true" data-rule-minlength="10" data-rule-maxlength="11" data-msg-required="Número de WhatsApp é obrigatório" data-msg-digits="Digite apenas números" data-msg-minlength="O número deve ter no mínimo 10 dígitos" data-msg-maxlength="O número deve ter no máximo 11 dígitos">
                                                <div class="form-text">Digite apenas números</div>
                                                <div class="invalid-feedback">Forneça um número de WhatsApp válido (10 ou 11 dígitos)</div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <div class="form-check form-switch mb-2">
                                                <input class="form-check-input" type="checkbox" id="edit_divulgacao" name="divulgacao" value="true" dmx-bind:checked="evento.data.evento.divulgacao">
                                                <label class="form-check-label" for="edit_divulgacao">Apenas divulgação</label>
                                            </div>
                                            <div class="form-text">Quando não há vendas, selecionar essa opção</div>
                                        </div>
                                        <div class="col">
                                            <select id="edit_status_id" class="form-select" name="status_id" dmx-bind:value="evento.data.evento.status_id">
                                                <option value="1">Rascunho</option>
                                                <option value="2">Publicar agora</option>
                                                <option value="4">Finalizado</option>
                                                <option value="3">Cancelado</option>
                                            </select>
                                            <small class="form-text text-muted">Rascunho o evento é criado, mas não fica visível publicamente</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer justify-content-between text-end">
                <div>
                    <button type="button" class="btn btn-primary" id="editPrevStepBtn"><i class="fas fa-arrow-left me-1"></i> Anterior</button>
                </div>
                <div>
                    <button type="button" class="btn btn-primary" id="editNextStepBtn">Próximo <i class="fas fa-arrow-right ms-1"></i></button>
                    <button class="btn btn-primary" id="editSubmitBtn" style="display: none;" dmx-on:click="editarEventoForm.submit()"><i class="fas fa-check me-1"></i> Salvar Alterações</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Script para inicializar o formulário -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Toggle para configuração de mesa
        document.getElementById('is_mesa').addEventListener('change', function() {
            document.getElementById('mesa_config').style.display = this.checked ? 'block' : 'none';
            if (this.checked) {
                document.getElementById('qtide_mesa').setAttribute('required', 'required');
            } else {
                document.getElementById('qtide_mesa').removeAttribute('required');
            }
        });

        // Toggle para configuração de mesa na edição
        document.getElementById('edit_is_mesa').addEventListener('change', function() {
            document.getElementById('edit_mesa_config').style.display = this.checked ? 'block' : 'none';
            if (this.checked) {
                document.getElementById('edit_qtide_mesa').setAttribute('required', 'required');
            } else {
                document.getElementById('edit_qtide_mesa').removeAttribute('required');
            }
        });
        
        // Função para formatar o valor como moeda
        function formatarMoeda(valor) {
            // Remove tudo que não é dígito
            valor = valor.replace(/\D/g, '');
            
            // Converte para número e divide por 100 para obter o valor em reais
            const valorNumerico = parseFloat(valor) / 100;
            
            // Formata o número com 2 casas decimais
            return valorNumerico.toLocaleString('pt-BR', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });
        }
        
        // Aplicar máscara para os campos de valor
        const camposValor = ['valor', 'edit_valor'];
        
        camposValor.forEach(function(campoId) {
            const campoValor = document.getElementById(campoId);
            if (campoValor) {
                // Aplica a formatação quando o valor é alterado
                campoValor.addEventListener('input', function(e) {
                    // Guarda a posição do cursor
                    const cursorPos = this.selectionStart;
                    const valorOriginal = this.value;
                    
                    // Formata o valor
                    this.value = formatarMoeda(valorOriginal);
                    
                    // Tenta manter o cursor em uma posição sensível
                    const novaPosicao = this.value.length - (valorOriginal.length - cursorPos);
                    if (novaPosicao >= 0) {
                        this.selectionStart = novaPosicao;
                        this.selectionEnd = novaPosicao;
                    } else {
                        this.selectionStart = this.value.length;
                        this.selectionEnd = this.value.length;
                    }
                });
            }
        });
        
        // Converter os valores para o formato aceito pelo servidor antes do envio
        const formularios = ['novoItemForm', 'formEditarItem'];
        
        formularios.forEach(function(formId) {
            const form = document.getElementById(formId);
            if (form) {
                form.addEventListener('submit', function(e) {
                    // Encontrar o campo de valor correspondente
                    const campoId = formId === 'novoItemForm' ? 'valor' : 'edit_valor';
                    const valorInput = document.getElementById(campoId);
                    
                    // Verificar se o campo existe
                    if (valorInput) {
                        // Remove a formatação e converte para formato com ponto decimal
                        const valorTexto = valorInput.value.replace(/\./g, '').replace(',', '.');
                        const valorNumerico = parseFloat(valorTexto);
                        
                        // Cria um campo hidden para enviar o valor formatado
                        const hiddenValor = document.createElement('input');
                        hiddenValor.type = 'hidden';
                        hiddenValor.name = 'valor';
                        hiddenValor.value = valorNumerico.toFixed(2); // Garante 2 casas decimais
                        
                        // Remove o valor original e adiciona o hidden
                        valorInput.removeAttribute('name');
                        this.appendChild(hiddenValor);
                    }
                });
            }
        });

        // Função para preview de imagens na edição
        window.previewEditImage = function(input, previewId) {
            const preview = document.getElementById(previewId);
            const previewImg = preview.querySelector('img');
            
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    previewImg.src = e.target.result;
                    preview.style.display = 'block';
                };
                
                reader.readAsDataURL(input.files[0]);
            }
        };
        
        // Modal de edição de evento
        const editModal = document.getElementById('editarEventoModal');
        const editSteps = document.querySelectorAll('#editarEventoModal .step');
        const editProgressBar = document.querySelector('#editarEventoModal .progress-bar');
        const editPrevBtn = document.getElementById('editPrevStepBtn');
        const editNextBtn = document.getElementById('editNextStepBtn');
        const editSubmitBtn = document.getElementById('editSubmitBtn');
        
        // Toggle para campos condicionais no modal de edição
        document.getElementById('edit_tem_mapa').addEventListener('change', function() {
            document.getElementById('editMapaUploadContainer').style.display = this.checked ? 'block' : 'none';
        });
        
        document.getElementById('edit_destaque').addEventListener('change', function() {
            document.getElementById('editDestaqueConfigContainer').style.display = this.checked ? 'block' : 'none';
        });
        
        document.getElementById('edit_aceita_cartao').addEventListener('change', function() {
            document.getElementById('editCartoesConfigContainer').style.display = this.checked ? 'block' : 'none';
        });
        
        document.getElementById('edit_tem_cupom').addEventListener('change', function() {
            document.getElementById('editCupomConfigContainer').style.display = this.checked ? 'block' : 'none';
        });
        
        document.getElementById('edit_tem_whatsapp').addEventListener('change', function() {
            document.getElementById('editWhatsappConfigContainer').style.display = this.checked ? 'block' : 'none';
        });
        
        // Navegação entre etapas no modal de edição
        let editCurrentStep = 0;
        const editTotalSteps = editSteps.length;
        
        function updateEditStepDisplay() {
            editSteps.forEach((step, index) => {
                step.style.display = index === editCurrentStep ? 'block' : 'none';
            });
            
            // Atualizar a barra de progresso
            const progressPercentage = ((editCurrentStep + 1) / editTotalSteps) * 100;
            editProgressBar.style.width = `${progressPercentage}%`;
            editProgressBar.setAttribute('aria-valuenow', progressPercentage);
            
            // Atualizar os botões de navegação
            editPrevBtn.style.visibility = editCurrentStep === 0 ? 'hidden' : 'visible';
            editPrevBtn.disabled = editCurrentStep === 0;
            
            if (editCurrentStep === editTotalSteps - 1) {
                editNextBtn.style.display = 'none';
                editSubmitBtn.style.display = 'inline-block';
            } else {
                editNextBtn.style.display = 'inline-block';
                editSubmitBtn.style.display = 'none';
            }
        }
        
        // Botão Próximo
        editNextBtn.addEventListener('click', function() {
            if (validateEditCurrentStep()) {
                editCurrentStep++;
                if (editCurrentStep >= editTotalSteps) {
                    editCurrentStep = editTotalSteps - 1;
                }
                updateEditStepDisplay();
            }
        });
        
        // Botão Anterior
        editPrevBtn.addEventListener('click', function() {
            editCurrentStep--;
            if (editCurrentStep < 0) {
                editCurrentStep = 0;
            }
            updateEditStepDisplay();
        });
        
        // Validação básica do formulário por passo
        function validateEditCurrentStep() {
            const currentStepEl = editSteps[editCurrentStep];
            const requiredFields = currentStepEl.querySelectorAll('[required]');
            let isValid = true;
            
            requiredFields.forEach(field => {
                if (!field.value) {
                    field.classList.add('is-invalid');
                    isValid = false;
                } else {
                    field.classList.remove('is-invalid');
                }
            });
            
            // Validações específicas para o passo atual
            if (editCurrentStep === 2) { // Step 3: Descrição e Detalhes
                const mostrarDescricao = document.getElementById('edit_mostrar_descricao').checked;
                const descricao = document.getElementById('edit_descricao');
                
                if (mostrarDescricao && (!descricao.value || descricao.value.trim() === '')) {
                    descricao.classList.add('is-invalid');
                    isValid = false;
                } else {
                    descricao.classList.remove('is-invalid');
                }
                
                const destaque = document.getElementById('edit_destaque').checked;
                const segundosDestaque = document.getElementById('edit_segundos_destaque');
                
                if (destaque && (!segundosDestaque.value || segundosDestaque.value < 1000)) {
                    segundosDestaque.classList.add('is-invalid');
                    isValid = false;
                } else {
                    segundosDestaque.classList.remove('is-invalid');
                }
            }
            else if (editCurrentStep === 3) { // Step 4: Configurações de Pagamento
                const temCupom = document.getElementById('edit_tem_cupom').checked;
                
                if (temCupom) {
                    const codigoCupom = document.getElementById('edit_codigo_cupom');
                    const valorCupom = document.getElementById('edit_valor_cupom');
                    
                    if (!codigoCupom.value || codigoCupom.value.trim() === '') {
                        codigoCupom.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        codigoCupom.classList.remove('is-invalid');
                    }
                    
                    if (!valorCupom.value || valorCupom.value < 1 || valorCupom.value > 100) {
                        valorCupom.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        valorCupom.classList.remove('is-invalid');
                    }
                }
            }
            else if (editCurrentStep === 4) { // Step 5: Opções Adicionais
                const temWhatsapp = document.getElementById('edit_tem_whatsapp').checked;
                
                if (temWhatsapp) {
                    const numeroWhatsapp = document.getElementById('edit_numero_whatsapp');
                    
                    if (!numeroWhatsapp.value || !/^\d{10,11}$/.test(numeroWhatsapp.value)) {
                        numeroWhatsapp.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        numeroWhatsapp.classList.remove('is-invalid');
                    }
                }
            }
            
            return isValid;
        }
        
        // Resetar navegação ao fechar o modal
        editModal.addEventListener('hidden.bs.modal', function() {
            editCurrentStep = 0;
            updateEditStepDisplay();
        });
        
        // Inicializar a visualização do passo
        updateEditStepDisplay();

        // Garantir que o app Wappler está disponível globalmente
        if (typeof window.app === 'undefined' && typeof dmx !== 'undefined' && dmx.app) {
            window.app = dmx.app;
            console.log("Inicializando app global a partir do dmx.app");
        }
        
        // Adicionar evento de click manualmente (fallback)
        document.addEventListener('DOMContentLoaded', function() {
            const btnGerarPDF = document.getElementById('btn-gerar-pdf');
            if (btnGerarPDF) {
                btnGerarPDF.addEventListener('click', function(e) {
                    console.log("Click manual no botão de gerar PDF");
                    // Se o Wappler não processar o evento, tentamos manualmente
                    if (typeof app === 'undefined' || !app.compradores || !app.compradores.load) {
                        console.log("Tentando carregar dados manualmente...");
                        // Usar fetch para carregar os dados
                        fetch('/api/vendas/lista_compradores?uuid=' + encodeURIComponent(new URLSearchParams(window.location.search).get('evento')))
                            .then(response => response.json())
                            .then(data => {
                                console.log("Dados carregados manualmente:", data);
                                // Simular a estrutura que o Wappler criaria
                                if (!window.app) window.app = {};
                                window.app.compradores = {
                                    state: 'success',
                                    data: data
                                };
                                window.app.evento = {
                                    data: {
                                        evento: {
                                            titulo: document.querySelector('h2.mb-0').textContent,
                                            data_hora: new Date(),
                                            local: 'Local do evento'
                                        }
                                    }
                                };
                                window.app.moment1 = {
                                    moment: function(date) {
                                        return {
                                            format: function(fmt) {
                                                const d = new Date(date);
                                                return d.toLocaleDateString('pt-BR') + ' ' + 
                                                       d.toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'});
                                            }
                                        };
                                    }
                                };
                                criarPDF();
                                return;
                            })
                            .catch(error => {
                                console.error("Erro ao carregar dados manualmente:", error);
                                alert("Erro ao carregar dados: " + error.message);
                            });
                    }
                });
            }
        });
        
        // Função para gerar PDF com a lista de compradores
        function gerarPDF() {
            try {
                console.log("Iniciando geração de PDF...");
                
                // Verificar se os dados estão disponíveis
                if (!window.jspdf) {
                    console.log("Biblioteca jsPDF não encontrada, tentando carregar dinamicamente...");
                    carregarBibliotecas().then(() => {
                        console.log("Bibliotecas carregadas com sucesso, continuando...");
                        verificarDados();
                    }).catch(erro => {
                        console.error("Falha ao carregar bibliotecas:", erro);
                        alert("Não foi possível carregar as bibliotecas necessárias: " + erro.message);
                    });
                    return;
                }
                
                verificarDados();
            } catch (err) {
                console.error("Erro na função gerarPDF:", err);
                alert("Erro ao iniciar geração do PDF. Verifique o console para detalhes.");
            }
            
            // Carregar bibliotecas dinâmicamente
            function carregarBibliotecas() {
                return new Promise((resolve, reject) => {
                    try {
                        // Carregar jsPDF
                        const scriptJsPDF = document.createElement('script');
                        scriptJsPDF.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/3.0.1/jspdf.umd.min.js';
                        
                        scriptJsPDF.onload = function() {
                            console.log("jsPDF carregado, carregando autoTable...");
                            // Carregar autoTable
                            const scriptAutoTable = document.createElement('script');
                            scriptAutoTable.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.7.0/jspdf.plugin.autotable.min.js';
                            
                            scriptAutoTable.onload = function() {
                                console.log("autoTable carregado com sucesso");
                                resolve();
                            };
                            
                            scriptAutoTable.onerror = function(error) {
                                reject(new Error("Falha ao carregar autoTable"));
                            };
                            
                            document.head.appendChild(scriptAutoTable);
                        };
                        
                        scriptJsPDF.onerror = function(error) {
                            reject(new Error("Falha ao carregar jsPDF"));
                        };
                        
                        document.head.appendChild(scriptJsPDF);
                    } catch (error) {
                        reject(error);
                    }
                });
            }
            
            // Verificar dados e iniciar processo quando disponíveis
            function verificarDados() {
                // Verificar se o app Wappler está disponível
                if (!window.app || !window.app.compradores) {
                    console.error("App Wappler não inicializado corretamente!");
                    
                    // Tentativa de usar o dmx Wappler
                    if (window.dmx && dmx.app && dmx.app.compradores) {
                        window.app = dmx.app;
                        console.log("Usando dmx.app como fallback");
                    } else {
                        console.log("Tentando carregar dados manualmente...");
                        // Usar fetch para carregar os dados
                        fetch('/api/vendas/lista_compradores?uuid=' + encodeURIComponent(new URLSearchParams(window.location.search).get('evento')))
                            .then(response => response.json())
                            .then(data => {
                                console.log("Dados carregados manualmente:", data);
                                // Simular a estrutura que o Wappler criaria
                                if (!window.app) window.app = {};
                                window.app.compradores = {
                                    state: 'success',
                                    data: data
                                };
                                window.app.evento = {
                                    data: {
                                        evento: {
                                            titulo: document.querySelector('h2.mb-0').textContent,
                                            data_hora: new Date(),
                                            local: 'Local do evento'
                                        }
                                    }
                                };
                                window.app.moment1 = {
                                    moment: function(date) {
                                        return {
                                            format: function(fmt) {
                                                const d = new Date(date);
                                                return d.toLocaleDateString('pt-BR') + ' ' + 
                                                       d.toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'});
                                            }
                                        };
                                    }
                                };
                                criarPDF();
                                return;
                            })
                            .catch(error => {
                                console.error("Erro ao carregar dados manualmente:", error);
                                alert("Erro ao carregar dados: " + error.message);
                            });
                    }
                }
                
                // Esperar os dados serem carregados
                console.log("Verificando dados dos compradores...");
                let tempoDeEspera = 0;
                const checkData = setInterval(() => {
                    try {
                        // Se demorar mais de 5 segundos, tentamos o método alternativo
                        if (tempoDeEspera > 5000) {
                            console.log("Tempo de espera excedido, tentando método alternativo");
                            clearInterval(checkData);
                            
                            // Tentar o método alternativo via fetch
                            fetch('/api/vendas/lista_compradores?uuid=' + encodeURIComponent(new URLSearchParams(window.location.search).get('evento')))
                                .then(response => response.json())
                                .then(data => {
                                    console.log("Dados carregados via fetch:", data);
                                    if (!window.app) window.app = {};
                                    window.app.compradores = {
                                        state: 'success',
                                        data: data
                                    };
                                    criarPDF();
                                })
                                .catch(error => {
                                    console.error("Erro ao carregar dados via fetch:", error);
                                    alert("Não foi possível carregar os dados dos compradores. Erro: " + error.message);
                                });
                            return;
                        }
                        
                        if (app.compradores && app.compradores.state === 'success' && app.compradores.data && app.compradores.data.vendas) {
                            console.log("Dados recebidos com sucesso:", app.compradores.data.vendas.length, "registros");
                            clearInterval(checkData);
                            criarPDF();
                        } else {
                            console.log("Aguardando dados...", app.compradores ? app.compradores.state : "não inicializado");
                            tempoDeEspera += 500;
                        }
                    } catch (err) {
                        console.error("Erro ao verificar dados:", err);
                        clearInterval(checkData);
                        alert("Erro ao verificar dados dos compradores. Verifique o console para detalhes.");
                    }
                }, 500);
            }
            
            function criarPDF() {
                console.log("Iniciando criação do PDF...");
                
                // Tentar usar método alternativo se jsPDF não estiver disponível
                if (!window.jspdf) {
                    console.log("jsPDF não encontrado, tentando método alternativo com CDN");
                    var script = document.createElement('script');
                    script.src = 'https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js';
                    script.onload = function() {
                        var autoTable = document.createElement('script');
                        autoTable.src = 'https://unpkg.com/jspdf-autotable@latest/dist/jspdf.plugin.autotable.js';
                        autoTable.onload = criarPDFComBibliotecas;
                        document.head.appendChild(autoTable);
                    };
                    document.head.appendChild(script);
                    return;
                }
                
                criarPDFComBibliotecas();
                
                // Função para criar PDF depois de garantir que as bibliotecas estão carregadas
                function criarPDFComBibliotecas() {
                    // Inicialização do jsPDF conforme a versão 3.0.1
                    let doc;
                    
                    try {
                        console.log("Tentando inicializar jsPDF...");
                        
                        // Tentar diferentes formas de inicialização
                        if (typeof window.jspdf === 'object' && typeof window.jspdf.jsPDF === 'function') {
                            console.log("Usando jspdf.jsPDF");
                            doc = new window.jspdf.jsPDF();
                        } else if (typeof window.jsPDF === 'function') {
                            console.log("Usando window.jsPDF");
                            doc = new window.jsPDF();
                        } else if (typeof jsPDF === 'function') {
                            console.log("Usando jsPDF global");
                            doc = new jsPDF();
                        } else {
                            throw new Error("Nenhum construtor jsPDF válido encontrado");
                        }
                        
                        console.log("jsPDF inicializado com sucesso");
                    } catch (error) {
                        console.error("Erro ao inicializar jsPDF:", error);
                        alert("Não foi possível gerar o PDF. Erro: " + error.message);
                        return;
                    }
                    
                    try {
                        // Obter dados do evento
                        const eventoTitulo = app.evento.data.evento.titulo;
                        const eventoData = app.moment1.moment(app.evento.data.evento.data_hora).format('DD/MM/YYYY HH:mm');
                        const eventoLocal = app.evento.data.evento.local;
                        
                        console.log("Dados do evento obtidos:", eventoTitulo);
                        
                        // Adicionar cabeçalho
                        doc.setFontSize(18);
                        doc.text('Lista de Compradores', 105, 15, { align: 'center' });
                        
                        doc.setFontSize(12);
                        doc.text(`Evento: ${eventoTitulo}`, 14, 25);
                        doc.text(`Data: ${eventoData}`, 14, 32);
                        doc.text(`Local: ${eventoLocal}`, 14, 39);
                        
                        // Preparar dados para a tabela
                        const dados = app.compradores.data.vendas;
                        console.log("Preparando", dados.length, "registros para a tabela");
                        
                        const colunas = [
                            { header: 'Nome', dataKey: 'participante_nome' },
                            { header: 'E-mail', dataKey: 'participante_email' },
                            { header: 'Telefone', dataKey: 'participante_telefone' },
                            { header: 'CPF', dataKey: 'participante_cpf' },
                            { header: 'Ingresso', dataKey: 'evento_item_nome' },
                            { header: 'Check-in', dataKey: 'check_in' }
                        ];
                        
                        const dadosFormatados = dados.map(item => ({
                            ...item,
                            check_in: item.check_in ? 'Sim' : 'Não'
                        }));
                        
                        // Verificar se autoTable está disponível
                        if (typeof doc.autoTable !== 'function') {
                            console.error("Plugin autoTable não encontrado!");
                            alert("Plugin autoTable não está disponível. Gerando PDF sem tabela.");
                            
                            // Renderizar alternativa para tabela
                            doc.setFontSize(10);
                            doc.text("DADOS DOS COMPRADORES:", 14, 50);
                            
                            let y = 60;
                            dadosFormatados.forEach((item, index) => {
                                doc.setFontSize(9);
                                doc.text(`${index + 1}. ${item.participante_nome || 'N/A'} - ${item.participante_email || 'N/A'} - ${item.evento_item_nome || 'N/A'}`, 14, y);
                                y += 5;
                                
                                // Adicionar nova página se necessário
                                if (y > 280) {
                                    doc.addPage();
                                    y = 20;
                                }
                            });
                        } else {
                            console.log("Gerando tabela...");
                            // Gerar tabela
                            doc.autoTable({
                                startY: 45,
                                head: [colunas.map(col => col.header)],
                                body: dadosFormatados.map(row => colunas.map(col => row[col.dataKey])),
                                styles: { fontSize: 9, cellPadding: 3 },
                                headStyles: { fillColor: [66, 66, 66] },
                                alternateRowStyles: { fillColor: [245, 245, 245] },
                                margin: { top: 45 }
                            });
                        }
                        
                        // Data de geração do relatório
                        const dataGeracao = app.moment1.moment().format('DD/MM/YYYY HH:mm:ss');
                        const pageCount = doc.internal.getNumberOfPages();
                        doc.setFontSize(8);
                        
                        for (let i = 1; i <= pageCount; i++) {
                            doc.setPage(i);
                            doc.text(`Gerado em: ${dataGeracao} - Página ${i} de ${pageCount}`, 
                                doc.internal.pageSize.width - 14, 
                                doc.internal.pageSize.height - 10, 
                                { align: 'right' });
                        }
                        
                        console.log("PDF gerado com sucesso, iniciando download...");
                        try {
                            // Baixar o PDF
                            doc.save(`Lista_Compradores_${eventoTitulo.replace(/[^a-z0-9]/gi, '_')}.pdf`);
                            console.log("Download do PDF concluído");
                        } catch (saveError) {
                            console.error("Erro ao salvar PDF:", saveError);
                            alert("Erro ao baixar o PDF: " + saveError.message);
                            
                            // Tentativa alternativa usando Blob
                            try {
                                const pdfBlob = doc.output('blob');
                                const url = URL.createObjectURL(pdfBlob);
                                const a = document.createElement('a');
                                a.href = url;
                                a.download = `Lista_Compradores_${eventoTitulo.replace(/[^a-z0-9]/gi, '_')}.pdf`;
                                a.style.display = 'none';
                                document.body.appendChild(a);
                                a.click();
                                URL.revokeObjectURL(url);
                                document.body.removeChild(a);
                                console.log("Download alternativo do PDF realizado");
                            } catch (blobError) {
                                console.error("Erro no método alternativo:", blobError);
                                alert("Todos os métodos de download falharam. Verifique o console para detalhes.");
                            }
                        }
                    } catch (error) {
                        console.error("Erro ao gerar conteúdo do PDF:", error);
                        alert("Erro ao gerar o PDF: " + error.message);
                    }
                }
            }
        }
    });
</script>